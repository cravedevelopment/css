//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CSS.MVC.Angular.QUEUEApi {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QUEUEApi.IQueue")]
    public interface IQueue {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AddMessageGet", ReplyAction="http://tempuri.org/IQueue/AddMessageGetResponse")]
        string AddMessageGet(string token, string message, string assembly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AddMessageGet", ReplyAction="http://tempuri.org/IQueue/AddMessageGetResponse")]
        System.Threading.Tasks.Task<string> AddMessageGetAsync(string token, string message, string assembly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AddMessagePost", ReplyAction="http://tempuri.org/IQueue/AddMessagePostResponse")]
        string AddMessagePost(string token, string assembly, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AddMessagePost", ReplyAction="http://tempuri.org/IQueue/AddMessagePostResponse")]
        System.Threading.Tasks.Task<string> AddMessagePostAsync(string token, string assembly, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/RunPluginGet", ReplyAction="http://tempuri.org/IQueue/RunPluginGetResponse")]
        string RunPluginGet(string token, string message, string assembly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/RunPluginGet", ReplyAction="http://tempuri.org/IQueue/RunPluginGetResponse")]
        System.Threading.Tasks.Task<string> RunPluginGetAsync(string token, string message, string assembly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/RunPluginPost", ReplyAction="http://tempuri.org/IQueue/RunPluginPostResponse")]
        string RunPluginPost(string token, string assembly, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/RunPluginPost", ReplyAction="http://tempuri.org/IQueue/RunPluginPostResponse")]
        System.Threading.Tasks.Task<string> RunPluginPostAsync(string token, string assembly, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AuthenticateUser", ReplyAction="http://tempuri.org/IQueue/AuthenticateUserResponse")]
        string AuthenticateUser(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AuthenticateUser", ReplyAction="http://tempuri.org/IQueue/AuthenticateUserResponse")]
        System.Threading.Tasks.Task<string> AuthenticateUserAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AuthenticateUserByEncryptedObject", ReplyAction="http://tempuri.org/IQueue/AuthenticateUserByEncryptedObjectResponse")]
        string AuthenticateUserByEncryptedObject(string obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AuthenticateUserByEncryptedObject", ReplyAction="http://tempuri.org/IQueue/AuthenticateUserByEncryptedObjectResponse")]
        System.Threading.Tasks.Task<string> AuthenticateUserByEncryptedObjectAsync(string obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AuthenticateToken", ReplyAction="http://tempuri.org/IQueue/AuthenticateTokenResponse")]
        string AuthenticateToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/AuthenticateToken", ReplyAction="http://tempuri.org/IQueue/AuthenticateTokenResponse")]
        System.Threading.Tasks.Task<string> AuthenticateTokenAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/CheckToken", ReplyAction="http://tempuri.org/IQueue/CheckTokenResponse")]
        bool CheckToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/CheckToken", ReplyAction="http://tempuri.org/IQueue/CheckTokenResponse")]
        System.Threading.Tasks.Task<bool> CheckTokenAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/StreamMessage", ReplyAction="http://tempuri.org/IQueue/StreamMessageResponse")]
        System.IO.Stream StreamMessage(string token, string assembly, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueue/StreamMessage", ReplyAction="http://tempuri.org/IQueue/StreamMessageResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> StreamMessageAsync(string token, string assembly, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQueueChannel : CSS.MVC.Angular.QUEUEApi.IQueue, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueueClient : System.ServiceModel.ClientBase<CSS.MVC.Angular.QUEUEApi.IQueue>, CSS.MVC.Angular.QUEUEApi.IQueue {
        
        public QueueClient() {
        }
        
        public QueueClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QueueClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddMessageGet(string token, string message, string assembly) {
            return base.Channel.AddMessageGet(token, message, assembly);
        }
        
        public System.Threading.Tasks.Task<string> AddMessageGetAsync(string token, string message, string assembly) {
            return base.Channel.AddMessageGetAsync(token, message, assembly);
        }
        
        public string AddMessagePost(string token, string assembly, string message) {
            return base.Channel.AddMessagePost(token, assembly, message);
        }
        
        public System.Threading.Tasks.Task<string> AddMessagePostAsync(string token, string assembly, string message) {
            return base.Channel.AddMessagePostAsync(token, assembly, message);
        }
        
        public string RunPluginGet(string token, string message, string assembly) {
            return base.Channel.RunPluginGet(token, message, assembly);
        }
        
        public System.Threading.Tasks.Task<string> RunPluginGetAsync(string token, string message, string assembly) {
            return base.Channel.RunPluginGetAsync(token, message, assembly);
        }
        
        public string RunPluginPost(string token, string assembly, string message) {
            return base.Channel.RunPluginPost(token, assembly, message);
        }
        
        public System.Threading.Tasks.Task<string> RunPluginPostAsync(string token, string assembly, string message) {
            return base.Channel.RunPluginPostAsync(token, assembly, message);
        }
        
        public string AuthenticateUser(string email, string password) {
            return base.Channel.AuthenticateUser(email, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateUserAsync(string email, string password) {
            return base.Channel.AuthenticateUserAsync(email, password);
        }
        
        public string AuthenticateUserByEncryptedObject(string obj) {
            return base.Channel.AuthenticateUserByEncryptedObject(obj);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateUserByEncryptedObjectAsync(string obj) {
            return base.Channel.AuthenticateUserByEncryptedObjectAsync(obj);
        }
        
        public string AuthenticateToken(string token) {
            return base.Channel.AuthenticateToken(token);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateTokenAsync(string token) {
            return base.Channel.AuthenticateTokenAsync(token);
        }
        
        public bool CheckToken(string token) {
            return base.Channel.CheckToken(token);
        }
        
        public System.Threading.Tasks.Task<bool> CheckTokenAsync(string token) {
            return base.Channel.CheckTokenAsync(token);
        }
        
        public System.IO.Stream StreamMessage(string token, string assembly, string message) {
            return base.Channel.StreamMessage(token, assembly, message);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> StreamMessageAsync(string token, string assembly, string message) {
            return base.Channel.StreamMessageAsync(token, assembly, message);
        }
    }
}
